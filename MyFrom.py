from PyQt5 import QtWidgets, uic, QtGui, QtCore
from PyQt5.QtWidgets import QFileDialog
import sys, os, base64, re
from dotenv import load_dotenv
from groq import Groq
from Pattern import patterns
from openai import OpenAI
import os


load_dotenv()
print("DEBUG: .env path =", os.path.abspath(".env"))
print("DEBUG: OPENAI_API_KEY =", os.getenv("OPENAI_API_KEY"))
print("DEBUG: GROQ_API_KEY =", os.getenv("GROQ_API_KEY"))


load_dotenv()
api_key = os.getenv("GROQ_API_KEY")
if not api_key:
    raise ValueError("‚ùå –í .env –Ω–µ—Ç GROQ_API_KEY")

client = Groq(api_key=api_key)

gpt_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

class MyApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        uic.loadUi("App.ui", self)

        self.patterns = patterns
        self.loaded_chart_path = None
        self.loaded_volume_path = None
        self.forecast_text = ""

        self.chart_scene = QtWidgets.QGraphicsScene(self)
        self.volume_scene = QtWidgets.QGraphicsScene(self)

        # === –ü—Ä–æ–≤–µ—Ä—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã ===
        required = [
            "patternList", "patternImage", "patternDescription",
            "chatOutput", "chatInput", "sendButton",
            "pushButton", "pushButton_2",  # üëà –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –æ–±—ä—ë–º–æ–≤
            "graphicsView", "graphicsView_3"  # üëà –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        ]
        for name in required:
            if not hasattr(self, name):
                raise AttributeError(f"‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ {name} –≤ App.ui")

        # === –°–æ–±—ã—Ç–∏—è ===
        self.patternList.currentRowChanged.connect(self.show_pattern)
        self.sendButton.clicked.connect(self.on_send)
        self.pushButton.clicked.connect(self.load_chart_image)
        self.pushButton_2.clicked.connect(self.load_volume_image)
        self.pushButton_3.clicked.connect(self.generate_future_chart)
        self.pushButton_4.clicked.connect(self.generate_forecast_image)

        # === –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
        self.show_all_patterns()

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ ===
    def load_chart_image(self):
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞", "", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.bmp)")
        if not path:
            return
        self.loaded_chart_path = path
        pixmap = QtGui.QPixmap(path)
        if pixmap.isNull():
            self.chatOutput.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
            return
        scaled = pixmap.scaled(self.graphicsView.width(), self.graphicsView.height(), QtCore.Qt.KeepAspectRatio)
        self.chart_scene.clear()
        self.chart_scene.addPixmap(scaled)
        self.graphicsView.setScene(self.chart_scene)
        self.chatOutput.append("üìä –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

    def generate_forecast_image(self):
        if not self.forecast_text:
            self.chatOutput.append("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
            return

        try:
            self.chatOutput.append("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞...")
            prompt = (
                "–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:\n\n"
                f"{self.forecast_text}\n\n"
                "–ü–æ–∫–∞–∂–∏ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑/—Ñ–ª—ç—Ç). "
                "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞."
            )

            result = gpt_client.images.generate(
                model="gpt-image-1",
                prompt=prompt,
                size="1024x1024"
            )

            img_b64 = result.data[0].b64_json
            img_bytes = base64.b64decode(img_b64)
            out_path = "forecast_chart.png"
            with open(out_path, "wb") as f:
                f.write(img_bytes)

            pixmap = QtGui.QPixmap(out_path)
            pixmap = pixmap.scaled(self.graphicsView.width(), self.graphicsView.height(), QtCore.Qt.KeepAspectRatio)
            self.chart_scene.addPixmap(pixmap)
            self.graphicsView.setScene(self.chart_scene)

            self.chatOutput.append("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞.")
        except Exception as e:
            self.chatOutput.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—ë–º–æ–≤ ===
    def load_volume_image(self):
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–≤", "", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.bmp)")
        if not path:
            return
        self.loaded_volume_path = path
        pixmap = QtGui.QPixmap(path)
        if pixmap.isNull():
            self.chatOutput.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–≤")
            return
        scaled = pixmap.scaled(self.graphicsView_3.width(), self.graphicsView_3.height(), QtCore.Qt.KeepAspectRatio)
        self.volume_scene.clear()
        self.volume_scene.addPixmap(scaled)
        self.graphicsView_3.setScene(self.volume_scene)
        self.chatOutput.append("üìà –û–±—ä—ë–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        # === –ï—Å–ª–∏ –æ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ ===
        if self.loaded_chart_path and self.loaded_volume_path:
            self.chatOutput.append("<b>üß† –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –æ–±—ä—ë–º–æ–≤...</b>")
            result = self.analyze_chart_with_volume(self.loaded_chart_path, self.loaded_volume_path)
            self.chatOutput.append(f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b> {result}")

            detected = self.extract_pattern_names(result)
            self.show_detected_patterns(detected)

    # === –ö–æ–¥–µ–∫ –¥–ª—è base64 ===
    def encode_image(self, path):
        with open(path, "rb") as f:
            return base64.b64encode(f.read()).decode("utf-8")

    # === –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ + –æ–±—ä—ë–º–æ–≤ ===
    def analyze_chart_with_volume(self, chart_path, volume_path):
        try:
            b64_chart = self.encode_image(chart_path)
            b64_volume = self.encode_image(volume_path)

            pattern_summary = "\n".join([f"- {p.name}: {p.description}" for p in patterns])

            completion = client.chat.completions.create(
                model="meta-llama/llama-4-scout-17b-16e-instruct",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É. "
                            "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –ø–µ—Ä–≤–æ–µ ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã, –≤—Ç–æ—Ä–æ–µ ‚Äî –æ–±—ä—ë–º—ã. "
                            "–¢—ã –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö —Å–æ–≤–º–µ—Å—Ç–Ω–æ.\n\n"
                            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:\n"
                            f"{pattern_summary}\n\n"
                            "1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–∏ –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∏ –æ—Ç–º–µ—Ç—å –∏—Ö –∫–∞–∫ %%–∏–º—è%%.\n"
                            "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ—Ü–µ–Ω–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: "
                            "**–í–≤–µ—Ä—Ö**, **–í–Ω–∏–∑** –∏–ª–∏ **–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (—Ñ–ª—ç—Ç)**.\n"
                            "3Ô∏è‚É£ –£–∫–∞–∂–∏ —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "**–ü—Ä–æ–≥–Ω–æ–∑: –í–≤–µ—Ä—Ö** (–∏–ª–∏ **–í–Ω–∏–∑**, –∏–ª–∏ **–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ**)."
                        )
                    },
                    {
                        "role": "user",
                        "content": [
                            {"type": "text",
                             "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞—Ñ–∏–∫ –∏ –æ–±—ä—ë–º—ã, –≤—ã–¥–µ–ª–∏ –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑."},
                            {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64_chart}"}},
                            {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64_volume}"}}
                        ]
                    }
                ],
            )

            result = completion.choices[0].message.content or "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏"

            # === –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ ===
            forecast_match = re.search(r"\*\*–ü—Ä–æ–≥–Ω–æ–∑:(.*?)\*\*", result)
            if forecast_match:
                forecast_text = forecast_match.group(0)
                self.resultChatgrahik.setHtml(f"<b style='color:#2E86C1;font-size:16px'>{forecast_text}</b>")
            else:
                self.resultChatgrahik.setHtml("<b>‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")

            return result

        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

    # === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===
    def extract_pattern_names(self, text):
        if not text:
            return [], []

        all_found = re.findall(r"%%(.*?)%%", text)
        detected, new_patterns = [], []
        known_names = [p.name.lower() for p in patterns]

        for name in all_found:
            clean = name.strip().lower()
            if clean.endswith("(–Ω–æ–≤—ã–π)"):
                clean = clean.replace("(–Ω–æ–≤—ã–π)", "").strip()
                new_patterns.append(clean)
            elif any(clean in k or k in clean for k in known_names):
                detected.append(clean)
            else:
                new_patterns.append(clean)
        return detected, new_patterns

    def show_detected_patterns(self, result):
        detected, new_patterns = result
        self.patternList.clear()

        if not detected and not new_patterns:
            self.patternList.addItem("‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã")
            self.patternDescription.setText("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞—à–ª–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
            return

        found = []
        for p in patterns:
            pname = p.name.lower()
            for d in detected:
                if d in pname or pname in d:
                    found.append(p)
                    break

        if found:
            self.patterns = found
            self.patternList.addItem("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
            for p in found:
                self.patternList.addItem(p.name)

        if new_patterns:
            self.patternList.addItem("")
            self.patternList.addItem("üÜï –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
            for n in new_patterns:
                self.patternList.addItem(f"üß© {n}")

    def show_all_patterns(self):
        self.patternList.clear()
        for p in self.patterns:
            self.patternList.addItem(p.name)

    def show_pattern(self, index):
        if index < 0 or index >= len(self.patterns):
            return
        p = self.patterns[index]
        self.patternDescription.setText(p.description)
        if os.path.exists(p.image_path):
            pixmap = QtGui.QPixmap(p.image_path)
            pixmap = pixmap.scaled(self.patternImage.width(), self.patternImage.height(), QtCore.Qt.KeepAspectRatio)
            self.patternImage.setPixmap(pixmap)
        else:
            self.patternImage.setText("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞ ===
    def generate_future_chart(self):
        if not self.loaded_chart_path:
            self.chatOutput.append("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        try:
            self.chatOutput.append("üß© –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞...")

            b64_chart = self.encode_image(self.loaded_chart_path)

            # –ú–æ–¥–µ–ª—å: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            completion = client.chat.completions.create(
                model="meta-llama/llama-4-scout-17b-16e-instruct",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤. "
                            "–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–π –ø—Ä–æ–≥–Ω–æ–∑: –ø–æ–∫–∞–∂–∏, "
                            "–∫—É–¥–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–æ–π–¥—ë—Ç —Ü–µ–Ω–∞, –Ω–∞—Ä–∏—Å—É–π —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, "
                            "–æ–±–æ–∑–Ω–∞—á—å —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è. "
                            "–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞, –Ω–µ –∏–∑–º–µ–Ω—è–π –ø—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ."
                        )
                    },
                    {
                        "role": "user",
                        "content": [
                            {"type": "text",
                             "text": "–ü—Ä–æ–¥–æ–ª–∂–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –≤–ø–µ—Ä—ë–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π."},
                            {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64_chart}"}}
                        ]
                    }
                ]
            )

            result_text = completion.choices[0].message.content

            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            self.forecast_text = result_text
            self.resultChatgrahik.setHtml(f"<b>üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω:</b><br>{result_text}")
        except Exception as e:
            self.chatOutput.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    def on_send(self):
        text = self.chatInput.text().strip()
        if not text:
            return
        self.chatOutput.append(f"<b>–í—ã:</b> {text}")
        self.chatInput.clear()
        reply = self.ask_groq(text)
        self.chatOutput.append(f"<b>ZeroService:</b> {reply}")

    def ask_groq(self, text):
        try:
            completion = client.chat.completions.create(
                model="llama-3.3-70b-versatile",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ ZeroService."},
                    {"role": "user", "content": text}
                ]
            )
            return completion.choices[0].message.content
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Groq API: {e}"


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    win = MyApp()
    win.show()
    sys.exit(app.exec_())
